// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User{
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  password String
  accounType Boolean @default(false)
  createdAt DateTime @default(now())
  accountIsActive Boolean  @default(true)

  order Order[]
  tokens JWTToken[]
}

model Order{
  id Int @id @default(autoincrement())
  date DateTime @default(now())
  updated DateTime @updatedAt
  status String @default("pending")
  fullPrice Int

  orderitem Orderitem[]

  reservation Reservation? @relation(fields: [reservationId], references: [id])
  reservationId Int? 

  user User @relation(fields: [userId], references: [id])
  userId Int

}

model Orderitem{
  id Int @id @default(autoincrement())
  productName String
  unit String
  price Int
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])
  orderId Int

}

model Drinks{
   id Int @id @default(autoincrement())
   drinkName String
   unit String
   price Int


} 
model Foods{
   id Int @id @default(autoincrement())
   foodName String
   unit String
   price Int


} 

model Reservation{
  id Int @id @default(autoincrement())
  reservationDate DateTime

 
  order Order[]
}

model JWTToken{
  id Int    @id @default(autoincrement())
  token String 
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
}
